from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.Padding import pad, unpad
import cv2
import numpy as np
import base64
import os

def decrypt_image_with_aes(encrypted_image, aes_key, iv):
    """
    Decrypt an AES-encrypted image.
    """
    # Initialize AES cipher
    cipher_aes = AES.new(aes_key, AES.MODE_CBC, iv)

    # Decrypt the image bytes
    decrypted_image_bytes = unpad(cipher_aes.decrypt(encrypted_image), AES.block_size)

    # Decode image from bytes
    nparr = np.frombuffer(decrypted_image_bytes, np.uint8)
    image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    return image

def decrypt_aes_key_with_rsa(encrypted_aes_key, private_key):
    """
    Decrypt the AES key using RSA private key.
    """
    cipher_rsa = PKCS1_OAEP.new(private_key)
    aes_key = cipher_rsa.decrypt(encrypted_aes_key)
    return aes_key

def extract_data_from_image(stego_image_path, data_length):
    """
    Extract embedded data from a stego image using LSB steganography.
    """
    # Read the stego image
    stego_image = cv2.imread(stego_image_path)
    if stego_image is None:
        raise FileNotFoundError(f"Stego image '{stego_image_path}' not found.")

    # Flatten the image into a 1D array of bytes
    flat_image = stego_image.flatten()

    # Extract bits from the least significant bits of the image
    data_bits = []
    for byte in flat_image[:data_length * 8]:
        data_bits.append(byte & 1)

    # Convert bits to bytes
    data_bytes = bytearray()
    for i in range(0, len(data_bits), 8):
        byte = 0
        for bit in data_bits[i:i+8]:
            byte = (byte << 1) | bit
        data_bytes.append(byte)

    return bytes(data_bytes)

def main():
    # Paths and keys
    stego_image_path = "stego_with_data.png"  # Stego image with embedded data
    output_decrypted_image_path = "decrypted_image.png"  # Output decrypted image

    # Load RSA keys
    with open("private_key.pem", "rb") as priv_file:
        private_key = RSA.import_key(priv_file.read())

    # Load the encrypted AES key
    with open("encrypted_aes_key.bin", "rb") as key_file:
        encrypted_aes_key = key_file.read()

    # Load the initialization vector (IV)
    with open("iv.bin", "rb") as iv_file:
        iv = iv_file.read()

    # Extract the encrypted image data from the stego image
    encrypted_image_length = os.path.getsize("encrypted_image.bin")
    encrypted_image = extract_data_from_image(stego_image_path, encrypted_image_length)

    # Decrypt the AES key using RSA
    aes_key = decrypt_aes_key_with_rsa(encrypted_aes_key, private_key)

    # Decrypt the image using AES
    decrypted_image = decrypt_image_with_aes(encrypted_image, aes_key, iv)

    # Save the decrypted image
    cv2.imwrite(output_decrypted_image_path, decrypted_image)

    print(f"Decryption completed. Decrypted image saved as '{output_decrypted_image_path}'.")

if __name__ == "__main__":
    main()
